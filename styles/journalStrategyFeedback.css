/* Adjust main screen container */
.main-screen-container {
    overflow: auto;
    height: 90vh;
}

/* Container to center the forms */
.content-container {
    width: 100%;
    transform: scale(1.0); /* Scales links. 1.0 means no change */
    transform-origin: center; /* Ensure scaling is centered */
    position: relative; /* Ensures child elements are positioned relative to it */
    z-index: 0; /* Ensure the background stays behind */
    height: 100%;
    
}

/* Holds the chat bubble that directs the user what to do */
.chat-bubble-container {
    display: flex;
    flex-direction: column; /* Stack elements vertically */
    justify-content: left; /* Align to the left */
    align-items: flex-start; /* Align text bubbles to the left */
    margin-top: 20px;
    margin-left: 50px; 
    gap: 15px; /* Adds spacing between chat bubbles */
}


/* Chat bubble that is meant to come from the application to the user */
.chat-bubble-from {
    display: inline-block; /* Ensure the width scales to fit the text */
    background-color: var(--main-blue);
    color: var(--pure-white);
    font-family: 'Nunito', sans-serif;
    font-style: normal;
    font-weight: 900;
    font-size: 25px;
    line-height: 40px;
    border-radius: 25px; /* Rounded corners */
    border-bottom-left-radius: 5px; /* Slightly sharper bottom-left corner */
    padding: 15px 25px; /* Adjust padding */
    box-shadow: var(--main-shading-with-drop-shadow);
}

.chat-bubble-from u {
    text-decoration: var(--main-off-white) wavy underline;
    text-underline-offset: 25%;
    text-decoration-thickness: 10%; 
}


/* Holds feedback form */
.feedback-response-container {
    display: flex;
    justify-content: right; /* Align to the left */
    align-items: right; /* Align text bubbles to the left */
    margin: 25px;
    margin-right: 50px;
    margin-top: 30px;
}

/* The entire feedback form*/
.feedback-form{
    width: 850px;
    height: 280px;
    background: var(--main-blue);
    border-radius: 30px;
    border-bottom-right-radius: 5px;
    padding: 20px; 
    padding-right: 0px; 
    position: relative; /* Ensures child elements are positioned relative to it */
    box-shadow: var(--main-shading-with-drop-shadow);
    z-index: 0; /* Ensure the background stays behind */
    overflow: hidden;
    font-family: 'Nunito', sans-serif;
    display: flex; /* This makes it so both the left and right will be displayed side by side */
}

.feedback-form::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%; /* Full width of the rectangle */
    height: 100%; /* Full height of the rectangle */
    background-image: url('../images/backgroundImages/cloudsAndRainbow.svg'); /* Add the SVG as a background */
    background-size: cover; /* Ensure the SVG covers the entire area */
    background-position: center; /* Center the SVG */
    opacity: 0.25; /* Set the opacity */
    pointer-events: none; /* Make it non-interactive */
}
  

/* Foreground (yellow) rectangle styling */
.left-content-container {
    height: 100%;
    width: 66.667%;
    border-radius: 20px;
    position: relative; /* Position relative to the parent */
    z-index: 1; /* Ensure this rectangle appears on top */
    opacity: 1; /* Keep the rectangle fully opaque */
    align-items: center;
    justify-content: center;
    display: flex;
    overflow: hidden;
    box-shadow: var(--main-shading-with-drop-shadow);
}
  
/* Create a pseudo-element for the foreground opacity. This lets the foreground rectangle be low opacity but nothing else on top is */
.left-content-container::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: var(--main-cyan);
    border-radius: 20px;
    opacity: 0.9; /* Apply the 70% opacity here */
    z-index: -1; /* Ensure it stays behind the content */
    box-shadow: var(--main-shading-with-drop-shadow);
}


/* Left-side content container */
.right-content-container {
    position: relative;
    height: 100%;
    width: 33.333%;
    display: flex;
    flex-direction: column; /* Stack items vertically */
    z-index: 1; /* Ensure this rectangle appears on top */
}

.right-content-container-top {
    position: relative;
    height: 50%;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center; /* Centers text horizontally */
}

.i-found-container {
    /* Proper alignment */
    display: flex;
    justify-content: center; /* Centers text horizontally */
    align-items: center; /* Sticks flex items to the bottom */
    text-align: center; /* Ensures text is centered */
    position: relative;
    margin-top: 30px; /* Moves text down to look nicer and not be perfectly centered */
}

.i-found-container h2 {
    font-family: 'Nunito', sans-serif;
    font-style: normal;
    font-weight: 900;
    font-size: 33px;
    color: var(--pure-white);
    margin: 0px;
}

.right-content-container-bottom {
    position: relative;
    height: 35%;
    width: 100%;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    box-shadow: var(--main-light-shading-no-top-no-light);
    background-color: rgb(216, 66, 61, 0.85);
    margin-top: 5px;
}

.selected-feedback-rating {
    font-family: 'Nunito', sans-serif;
    font-style: normal;
    font-weight: 900;
    font-size: 28px;
    color: var(--pure-white);
    text-decoration: underline; 
    text-decoration: var(--pure-white) wavy underline;
    text-underline-offset: 25%;
    text-decoration-thickness: 10%; 
    margin-bottom: 12px; /* Adjust value to move text up */
}

/* Next button styling */
.form-button-container {
    display: flex;
    justify-content: center; /* Center horizontally */
    align-items: center; /* Center vertically if needed */
    margin: 50px;
    margin-top: 30px;
    padding-bottom:45px;
}
  
/* next button */
.form-button-next {
    background-color: var(--main-green-subdued);
    color: var(--pure-white);
    font-family: 'Nunito', sans-serif;
    font-style: normal;
    font-weight: 900;
    font-size: 30px;
    border: 2px solid transparent;
    border: none;
    border-radius: 25px; /* Rounded corners */
    padding: 10px 30px; /* Adjust button padding */
    cursor: pointer;
    box-shadow: var(--main-light-shading);
    width: auto; /* Ensure button is sized to its content */
}

.form-button-next:hover {
    color: var(--main-yellow-bold);
    background-color: var(--main-green);
    box-shadow: 0 0 0 4px var(--main-yellow-bold), var(--main-shading-with-drop-shadow); /* Add a yellow outline and default shading */ 
}

.hidden {
    display: none;
}


/* Container: make sure the two options are spaced evenly */
.feedback-icon-container {
    position: relative; /* Needed for the divider pseudo-element */
    display: flex;
    justify-content: space-around;
    align-items: center;
    margin: 20px 0;
    padding: 0 20px; /* adjust if you need more horizontal space */
    height: 100%;
    width: 100%;
}

/* Pseudo-element for the thin white divider */
.feedback-icon-container::after {
    content: "";
    position: absolute;
    top: 20%;       /* Adjust vertical placement */
    bottom: 20%;
    left: 50%;      /* Centered between the two options */
    width: 5px;     /* Divider width */
    background-color: var(--main-off-white);
    border-radius: 25px;  /* Rounded corners for the divider */
    box-shadow: var(--main-light-shading); 
}

/* Each option is a label that acts as a radio button */
.feedback-option {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    cursor: pointer;
    transition: filter 0.1s;
}

/* Hide the default radio button appearance */
.feedback-option input[type="radio"] {
    display: none;
}

/* Increase icon size */
.feedback-option img {
    width: 125px;  
    height: 125px;
    object-fit: contain;
    transition: filter 0.1s;
    filter: brightness(99%) contrast(99%);
    -webkit-user-drag: none; /* Should stop user from dragging the icon around if they hold it. Removes disraction */
    transition: transform 0.1s ease;
}

/* Text styling */
.feedback-text {
    font-family: 'Nunito', sans-serif;
    font-size: 25px;
    color: var(--pure-white);
    margin-top: 10px;
    font-weight: 900;
}

/* Hover effect: slight brightness increase */
.feedback-option:hover img {
    filter: brightness(104%) contrast(102%);
}

.feedback-option:active img {
    transform: scale(0.95);
}

/* Selected state: when the radio is checked, make the icon even brighter and add a red outline using drop-shadow */
.feedback-option input[type="radio"]:checked + img {
    /* makes selected icon brighter and have a glow */
    filter: brightness(110%) contrast(108%) drop-shadow(0 0 2px var(--main-off-white));
}

/* Selected state: underline the text of the selected option */
.feedback-option input[type="radio"]:checked + img + .feedback-text {
    text-decoration: underline; 
    text-decoration: var(--pure-white) wavy underline;
    text-underline-offset: 25%;
    text-decoration-thickness: 10%; 
}



